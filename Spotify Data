# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. Select track name with a speific range of danceability
SELECT track_name, danceability
FROM BIT_DB.Spotifydata
WHERE danceability BETWEEN 0.6 AND 0.8
ORDER BY danceability;

#2. Select the average loudness of 'BTS'
SELECT
artist_name
, AVG(loudness) AS average_loudness
FROM BIT_DB.Spotifydata
WHERE artist_name = 'BTS'; 


#3. The number artist name 'BTS' occurs in the table
SELECT
COUNT(artist_name)
FROM BIT_DB.Spotifydata
WHERE artist_name = 'BTS'
; 

#4. total duration in hour
SELECT SUM(duration_ms/120) Total_duration_hr
FROM BIT_DB.Spotifydata;

#5. Disregard rows that intrumentalness is equal to zero
SELECT * FROM BIT_DB.Spotifydata
WHERE instrumentalness<>0;

#6. Select artist names that belongs to greater than 90 popularity
SELECT artist_name
FROM BIT_DB.Spotifydata
WHERE Popularity > 90
ORDER BY Popularity;
